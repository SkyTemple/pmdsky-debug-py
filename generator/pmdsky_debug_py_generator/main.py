import os.path
import re
import traceback
from typing import Optional, TypeVar, IO, Union

import click
import toml
from click import echo, style, ClickException
from click._compat import get_text_stderr

from pmdsky_debug_py_generator.generator import generate, update_version
from pmdsky_debug_py_generator.loader import load_binaries
PYPROJECT_TOML = "pyproject.toml"
VERSION_SPLIT_RE = re.compile(r'[.+]')
T = TypeVar('T')


verbose_mode = False


class CliException(ClickException):
    def __init__(self, message: str, print_source: bool = False) -> None:
        super().__init__(message)
        self.print_source = print_source

    def show(self, file: Optional[IO] = None) -> None:
        if file is None:
            file = get_text_stderr()

        echo(style(f"⛔ Error: {self.format_message()}", fg='red'), file=file)

        if verbose_mode:
            if self.print_source:
                echo(style("".join(traceback.format_exception(self.__context__)), bg='red'), file=file)
            else:
                echo(style(traceback.format_exc(), bg='red'), file=file)


def try_int(i: str, fallback: T) -> Union[int, T]:
    try:
        return int(i)
    except (ValueError, TypeError):
        pass
    return fallback


def version_tuple(a: str) -> tuple[Union[int, str], ...]:
    if a.startswith('v'):
        a = a[1:]
    return tuple(try_int(i, i) for i in VERSION_SPLIT_RE.split(a))


def calculate_out_version(release: str, pptml: dict) -> str:
    echo(style("⚒ Determining new pmdsky-debug-py version...", fg='cyan'))
    release_t = version_tuple(release)
    echo(f"➡ pmdsky-debug release version: {release} {release_t}")
    old_version = pptml['project']['version']
    old_version_t = version_tuple(old_version)
    echo(f"➡ Old detected pmdsky-debug-py version: {old_version} {old_version_t}")

    # Convert the pmdsky-debug version to a candidate for a pmdsky-debug-py version
    rmajor, rminor, rpatch, *_ = release_t
    assert isinstance(rmajor, int)
    assert isinstance(rminor, int)
    assert isinstance(rpatch, int)
    nmajor = rmajor * 1000 + rminor
    nminor = rpatch

    # Check if we need to count up by one the old version or if we have a new unqiue minor
    omajor, ominor, opatch, *_ = old_version_t
    assert isinstance(omajor, int)
    assert isinstance(ominor, int)
    assert isinstance(opatch, int)

    if (omajor, ominor) == (nmajor, nminor):
        npatch = opatch + 1
    else:
        npatch = 0

    return '.'.join((str(nmajor), str(nminor), str(npatch)))


@click.command()
@click.version_option(prog_name="pmdsky_debug_py_generator")
@click.option(
    '-o', '--out-path', required=True,
    help='Output project path of pmdsky-debug-py (the directory containing the pyproject.toml for it).'
)
@click.option(
    '-i', '--in-path', required=True,
    help='Input path of the symbol data files (usually the root directory in pmdsky-debug).'
)
@click.option(
    '-r', '--release', required=True,
    help='pmdsky-debug release / version that is being read.'
)
@click.option(
    '--out-version',
    help='The output version of pmdsky-debug-py. If not set this, this is autogenerated, based on the '
         'pmdsky-debug release version and the current version in the pyproject.toml of pmdsky-debug-py.'
)
@click.option(
    '--package-name', default='pmdsky_debug_py',
    help='The name of the pmdsky-debug-py package.'
)
@click.option(
    '-v', '--verbose', is_flag=True,
    help='Verbose output. If enabled backtraces are print.'
)
def run(
    verbose: bool,
    out_path: str, in_path: str,
    package_name: str,
    release: str, out_version: Optional[str] = None,
):
    """Generator for pmdsky-debug-py."""
    global verbose_mode
    verbose_mode = verbose

    pptml_path = os.path.join(out_path, PYPROJECT_TOML)
    if not os.path.exists(pptml_path):
        raise CliException(f"No pyproject.toml found in --out-path: {out_path}.")
    pyproject_toml = toml.load(pptml_path)

    try:
        if out_version is None:
            out_version = calculate_out_version(release, pyproject_toml)
            echo(style(f"ℹ Calculated output version: {out_version}", fg='green'))
        else:
            echo(style(f"ℹ Specified output version: {out_version}", fg='green'))

        echo(style("⚒ Loading symbol table...", fg='cyan'))
        symbols = load_binaries(in_path)
        echo(style("⚒ Generating code...", fg='cyan'))
        generate(symbols, os.path.join(out_path, package_name), package_name, release)
        echo(style("⚒ Updating version...", fg='cyan'))
        update_version(pyproject_toml, out_version, pptml_path)
        echo(style(f"ℹ Done!", fg='green'))
    except CliException:
        raise
    except Exception as ex:
        raise CliException(f"Internal error: {ex}", print_source=True) from ex


if __name__ == '__main__':
    run()
